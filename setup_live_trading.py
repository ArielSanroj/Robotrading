"""
Setup Live Trading - Script de configuraci√≥n para trading en vivo
Configura el bot para salir del modo paper y activar trading con dinero real
"""

import os
import logging
from dotenv import load_dotenv, set_key

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def setup_live_trading():
    """Configura el bot para trading en vivo"""
    
    print("=" * 60)
    print("CONFIGURACI√ìN DE TRADING EN VIVO")
    print("=" * 60)
    print()
    print("‚ö†Ô∏è  ADVERTENCIA: Esta configuraci√≥n activar√° trading con DINERO REAL")
    print("   Aseg√∫rate de haber probado el bot en modo paper trading primero")
    print()
    
    # Verificar que existe .env
    if not os.path.exists('.env'):
        print("‚ùå No se encontr√≥ archivo .env")
        print("   Por favor copia .env.example a .env y configura las variables")
        return False
    
    # Cargar variables actuales
    load_dotenv()
    
    # Verificar configuraci√≥n actual
    current_paper = os.getenv("USE_PAPER", "True").lower() == "true"
    current_broker = os.getenv("BROKER", "ALPACA")
    
    print(f"Configuraci√≥n actual:")
    print(f"  - Broker: {current_broker}")
    print(f"  - Modo Paper: {'S√ç' if current_paper else 'NO'}")
    print()
    
    if not current_paper:
        print("‚úÖ El bot ya est√° configurado para trading en vivo")
        return True
    
    # Confirmar cambio
    print("¬øEst√°s seguro de que quieres cambiar a trading en vivo?")
    print("Esto significa que el bot usar√° DINERO REAL de tu cuenta")
    print()
    
    while True:
        response = input("Escribe 'SI' para confirmar o 'NO' para cancelar: ").strip().upper()
        if response == 'SI':
            break
        elif response == 'NO':
            print("‚ùå Configuraci√≥n cancelada")
            return False
        else:
            print("Por favor responde 'SI' o 'NO'")
    
    try:
        # Cambiar a trading en vivo
        set_key('.env', 'USE_PAPER', 'False')
        
        # Si usa IBKR, cambiar puerto a live
        if current_broker == 'IBKR':
            set_key('.env', 'IBKR_PORT', '7496')
            print("‚úÖ Puerto IBKR cambiado a 7496 (live trading)")
        
        print("‚úÖ Configuraci√≥n actualizada para trading en vivo")
        print()
        print("NUEVA CONFIGURACI√ìN:")
        print(f"  - Broker: {current_broker}")
        print(f"  - Modo Paper: NO (LIVE TRADING)")
        if current_broker == 'IBKR':
            print(f"  - Puerto IBKR: 7496 (live)")
        print()
        
        # Mostrar asignaciones de cartera
        print("ASIGNACIONES DE CARTERA:")
        print("  - Renta Variable (Acciones): 60%")
        print("  - Renta Fija (Bonos/ETFs): 30%")
        print("  - Criptomonedas: 10%")
        print()
        
        # Mostrar instrucciones finales
        print("INSTRUCCIONES FINALES:")
        print("1. Aseg√∫rate de que tu broker est√© configurado correctamente")
        print("2. Verifica que tienes fondos suficientes en tu cuenta")
        print("3. El bot respetar√° los l√≠mites de asignaci√≥n autom√°ticamente")
        print("4. Monitorea los logs en 'alerts.log' para seguimiento")
        print("5. El bot operar√° diariamente a las 4:00 PM (d√≠as h√°biles)")
        print()
        
        print("üöÄ ¬°Configuraci√≥n completada! El bot est√° listo para trading en vivo")
        return True
        
    except Exception as e:
        print(f"‚ùå Error actualizando configuraci√≥n: {e}")
        return False

def verify_live_setup():
    """Verifica que la configuraci√≥n de live trading est√© correcta"""
    
    print("=" * 60)
    print("VERIFICACI√ìN DE CONFIGURACI√ìN LIVE")
    print("=" * 60)
    
    load_dotenv()
    
    # Verificar variables cr√≠ticas
    use_paper = os.getenv("USE_PAPER", "True").lower() == "true"
    broker = os.getenv("BROKER", "ALPACA")
    shares_per_trade = int(os.getenv("SHARES_PER_TRADE", "10"))
    
    print(f"‚úÖ Modo Paper: {'S√ç' if use_paper else 'NO'}")
    print(f"‚úÖ Broker: {broker}")
    print(f"‚úÖ Acciones por trade: {shares_per_trade}")
    
    if use_paper:
        print("‚ö†Ô∏è  El bot est√° en modo PAPER - no usar√° dinero real")
    else:
        print("üî• El bot est√° en modo LIVE - usar√° dinero real")
    
    # Verificar configuraci√≥n espec√≠fica del broker
    if broker == "IBKR":
        ibkr_port = int(os.getenv("IBKR_PORT", "7497"))
        print(f"‚úÖ Puerto IBKR: {ibkr_port} ({'Paper' if ibkr_port == 7497 else 'Live'})")
        
        if not use_paper and ibkr_port == 7497:
            print("‚ö†Ô∏è  ADVERTENCIA: Modo live pero puerto paper (7497)")
        elif use_paper and ibkr_port == 7496:
            print("‚ö†Ô∏è  ADVERTENCIA: Modo paper pero puerto live (7496)")
    
    # Verificar variables de email
    gmail = os.getenv("GMAIL_ADDRESS")
    gmail_pass = os.getenv("GMAIL_APP_PASSWORD")
    recipient = os.getenv("RECIPIENT_EMAIL")
    
    if all([gmail, gmail_pass, recipient]):
        print("‚úÖ Configuraci√≥n de email: OK")
    else:
        print("‚ùå Configuraci√≥n de email: INCOMPLETA")
    
    print()
    return not use_paper

def show_portfolio_allocation():
    """Muestra la configuraci√≥n de asignaci√≥n de cartera"""
    
    print("=" * 60)
    print("CONFIGURACI√ìN DE ASIGNACI√ìN DE CARTERA")
    print("=" * 60)
    
    print("El bot gestiona autom√°ticamente una cartera diversificada:")
    print()
    print("üìà RENTA VARIABLE (60%)")
    print("   - Acciones del S&P 500 con mejor rendimiento YTD")
    print("   - An√°lisis t√©cnico con modelo HMM")
    print("   - M√°ximo 5 posiciones simult√°neas")
    print()
    print("üè¶ RENTA FIJA (30%)")
    print("   - ETFs de bonos del Tesoro (TLT, IEF, SHY)")
    print("   - ETFs de bonos corporativos (BND, AGG)")
    print("   - An√°lisis t√©cnico espec√≠fico para bonos")
    print()
    print("‚Çø CRIPTOMONEDAS (10%)")
    print("   - Principales criptos (BTC, ETH, ADA, SOL, DOT)")
    print("   - Trading 24/7 con an√°lisis t√©cnico")
    print("   - Verificaci√≥n de precios en tiempo real")
    print()
    print("üõ°Ô∏è  PROTECCIONES:")
    print("   - L√≠mites autom√°ticos de asignaci√≥n por clase de activo")
    print("   - Verificaci√≥n de poder de compra antes de trades")
    print("   - Validaci√≥n de precios de m√∫ltiples fuentes")
    print("   - Trading solo en horarios de mercado (excepto crypto)")
    print()

if __name__ == "__main__":
    print("ü§ñ ROBOTRADING - CONFIGURACI√ìN LIVE TRADING")
    print()
    
    while True:
        print("Selecciona una opci√≥n:")
        print("1. Configurar trading en vivo")
        print("2. Verificar configuraci√≥n actual")
        print("3. Mostrar asignaci√≥n de cartera")
        print("4. Salir")
        print()
        
        choice = input("Opci√≥n (1-4): ").strip()
        
        if choice == "1":
            setup_live_trading()
        elif choice == "2":
            verify_live_setup()
        elif choice == "3":
            show_portfolio_allocation()
        elif choice == "4":
            print("¬°Hasta luego!")
            break
        else:
            print("Opci√≥n inv√°lida. Por favor selecciona 1-4.")
        
        print()
        input("Presiona Enter para continuar...")
        print("\n" + "="*60 + "\n")